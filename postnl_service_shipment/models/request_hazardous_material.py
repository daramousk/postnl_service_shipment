# coding: utf-8

"""
    Labelling

    Generates a Base64 label  # noqa: E501

    OpenAPI spec version: v2_2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestHazardousMaterial(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'toxic_substance_code': 'str',
        'additional_toxic_substance_code': 'list[str]',
        'adr_points': 'str',
        'tunnel_code': 'str',
        'packaging_group_code': 'str',
        'packaging_group_description': 'str',
        'gross_weight': 'str',
        'undg_number': 'str',
        'transport_category_code': 'str',
        'chemical_technical_description': 'str'
    }

    attribute_map = {
        'toxic_substance_code': 'ToxicSubstanceCode',
        'additional_toxic_substance_code': 'AdditionalToxicSubstanceCode',
        'adr_points': 'ADRPoints',
        'tunnel_code': 'TunnelCode',
        'packaging_group_code': 'PackagingGroupCode',
        'packaging_group_description': 'PackagingGroupDescription',
        'gross_weight': 'GrossWeight',
        'undg_number': 'UNDGNumber',
        'transport_category_code': 'TransportCategoryCode',
        'chemical_technical_description': 'ChemicalTechnicalDescription'
    }

    def __init__(self, toxic_substance_code=None, additional_toxic_substance_code=None, adr_points=None, tunnel_code=None, packaging_group_code=None, packaging_group_description=None, gross_weight=None, undg_number=None, transport_category_code=None, chemical_technical_description=None):  # noqa: E501
        """RequestHazardousMaterial - a model defined in Swagger"""  # noqa: E501
        self._toxic_substance_code = None
        self._additional_toxic_substance_code = None
        self._adr_points = None
        self._tunnel_code = None
        self._packaging_group_code = None
        self._packaging_group_description = None
        self._gross_weight = None
        self._undg_number = None
        self._transport_category_code = None
        self._chemical_technical_description = None
        self.discriminator = None
        if toxic_substance_code is not None:
            self.toxic_substance_code = toxic_substance_code
        if additional_toxic_substance_code is not None:
            self.additional_toxic_substance_code = additional_toxic_substance_code
        if adr_points is not None:
            self.adr_points = adr_points
        if tunnel_code is not None:
            self.tunnel_code = tunnel_code
        if packaging_group_code is not None:
            self.packaging_group_code = packaging_group_code
        if packaging_group_description is not None:
            self.packaging_group_description = packaging_group_description
        if gross_weight is not None:
            self.gross_weight = gross_weight
        if undg_number is not None:
            self.undg_number = undg_number
        if transport_category_code is not None:
            self.transport_category_code = transport_category_code
        if chemical_technical_description is not None:
            self.chemical_technical_description = chemical_technical_description

    @property
    def toxic_substance_code(self):
        """Gets the toxic_substance_code of this RequestHazardousMaterial.  # noqa: E501


        :return: The toxic_substance_code of this RequestHazardousMaterial.  # noqa: E501
        :rtype: str
        """
        return self._toxic_substance_code

    @toxic_substance_code.setter
    def toxic_substance_code(self, toxic_substance_code):
        """Sets the toxic_substance_code of this RequestHazardousMaterial.


        :param toxic_substance_code: The toxic_substance_code of this RequestHazardousMaterial.  # noqa: E501
        :type: str
        """

        self._toxic_substance_code = toxic_substance_code

    @property
    def additional_toxic_substance_code(self):
        """Gets the additional_toxic_substance_code of this RequestHazardousMaterial.  # noqa: E501


        :return: The additional_toxic_substance_code of this RequestHazardousMaterial.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_toxic_substance_code

    @additional_toxic_substance_code.setter
    def additional_toxic_substance_code(self, additional_toxic_substance_code):
        """Sets the additional_toxic_substance_code of this RequestHazardousMaterial.


        :param additional_toxic_substance_code: The additional_toxic_substance_code of this RequestHazardousMaterial.  # noqa: E501
        :type: list[str]
        """

        self._additional_toxic_substance_code = additional_toxic_substance_code

    @property
    def adr_points(self):
        """Gets the adr_points of this RequestHazardousMaterial.  # noqa: E501


        :return: The adr_points of this RequestHazardousMaterial.  # noqa: E501
        :rtype: str
        """
        return self._adr_points

    @adr_points.setter
    def adr_points(self, adr_points):
        """Sets the adr_points of this RequestHazardousMaterial.


        :param adr_points: The adr_points of this RequestHazardousMaterial.  # noqa: E501
        :type: str
        """

        self._adr_points = adr_points

    @property
    def tunnel_code(self):
        """Gets the tunnel_code of this RequestHazardousMaterial.  # noqa: E501


        :return: The tunnel_code of this RequestHazardousMaterial.  # noqa: E501
        :rtype: str
        """
        return self._tunnel_code

    @tunnel_code.setter
    def tunnel_code(self, tunnel_code):
        """Sets the tunnel_code of this RequestHazardousMaterial.


        :param tunnel_code: The tunnel_code of this RequestHazardousMaterial.  # noqa: E501
        :type: str
        """

        self._tunnel_code = tunnel_code

    @property
    def packaging_group_code(self):
        """Gets the packaging_group_code of this RequestHazardousMaterial.  # noqa: E501


        :return: The packaging_group_code of this RequestHazardousMaterial.  # noqa: E501
        :rtype: str
        """
        return self._packaging_group_code

    @packaging_group_code.setter
    def packaging_group_code(self, packaging_group_code):
        """Sets the packaging_group_code of this RequestHazardousMaterial.


        :param packaging_group_code: The packaging_group_code of this RequestHazardousMaterial.  # noqa: E501
        :type: str
        """

        self._packaging_group_code = packaging_group_code

    @property
    def packaging_group_description(self):
        """Gets the packaging_group_description of this RequestHazardousMaterial.  # noqa: E501


        :return: The packaging_group_description of this RequestHazardousMaterial.  # noqa: E501
        :rtype: str
        """
        return self._packaging_group_description

    @packaging_group_description.setter
    def packaging_group_description(self, packaging_group_description):
        """Sets the packaging_group_description of this RequestHazardousMaterial.


        :param packaging_group_description: The packaging_group_description of this RequestHazardousMaterial.  # noqa: E501
        :type: str
        """

        self._packaging_group_description = packaging_group_description

    @property
    def gross_weight(self):
        """Gets the gross_weight of this RequestHazardousMaterial.  # noqa: E501


        :return: The gross_weight of this RequestHazardousMaterial.  # noqa: E501
        :rtype: str
        """
        return self._gross_weight

    @gross_weight.setter
    def gross_weight(self, gross_weight):
        """Sets the gross_weight of this RequestHazardousMaterial.


        :param gross_weight: The gross_weight of this RequestHazardousMaterial.  # noqa: E501
        :type: str
        """

        self._gross_weight = gross_weight

    @property
    def undg_number(self):
        """Gets the undg_number of this RequestHazardousMaterial.  # noqa: E501


        :return: The undg_number of this RequestHazardousMaterial.  # noqa: E501
        :rtype: str
        """
        return self._undg_number

    @undg_number.setter
    def undg_number(self, undg_number):
        """Sets the undg_number of this RequestHazardousMaterial.


        :param undg_number: The undg_number of this RequestHazardousMaterial.  # noqa: E501
        :type: str
        """

        self._undg_number = undg_number

    @property
    def transport_category_code(self):
        """Gets the transport_category_code of this RequestHazardousMaterial.  # noqa: E501


        :return: The transport_category_code of this RequestHazardousMaterial.  # noqa: E501
        :rtype: str
        """
        return self._transport_category_code

    @transport_category_code.setter
    def transport_category_code(self, transport_category_code):
        """Sets the transport_category_code of this RequestHazardousMaterial.


        :param transport_category_code: The transport_category_code of this RequestHazardousMaterial.  # noqa: E501
        :type: str
        """

        self._transport_category_code = transport_category_code

    @property
    def chemical_technical_description(self):
        """Gets the chemical_technical_description of this RequestHazardousMaterial.  # noqa: E501


        :return: The chemical_technical_description of this RequestHazardousMaterial.  # noqa: E501
        :rtype: str
        """
        return self._chemical_technical_description

    @chemical_technical_description.setter
    def chemical_technical_description(self, chemical_technical_description):
        """Sets the chemical_technical_description of this RequestHazardousMaterial.


        :param chemical_technical_description: The chemical_technical_description of this RequestHazardousMaterial.  # noqa: E501
        :type: str
        """

        self._chemical_technical_description = chemical_technical_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestHazardousMaterial, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestHazardousMaterial):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
