# coding: utf-8

"""
    Labelling

    Generates a Base64 label  # noqa: E501

    OpenAPI spec version: v2_2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestShipments(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addresses': 'list[RequestAddresses]',
        'amounts': 'list[RequestAmounts]',
        'barcode': 'str',
        'coding_text': 'str',
        'collection_time_stamp_start': 'str',
        'collection_time_stamp_end': 'str',
        'contacts': 'list[RequestContacts]',
        'content': 'str',
        'cost_center': 'str',
        'customer_order_number': 'str',
        'customs': 'list[RequestCustoms]',
        'delivery_address': 'str',
        'delivery_date': 'str',
        'delivery_time_stamp_start': 'str',
        'delivery_time_stamp_end': 'str',
        'dimension': 'RequestDimension',
        'down_partner_barcode': 'str',
        'down_partner_id': 'str',
        'down_partner_location': 'str',
        'groups': 'list[RequestGroups]',
        'hazardous_material': 'list[RequestHazardousMaterial]',
        'id_type': 'int',
        'id_number': 'str',
        'id_expiration': 'str',
        'product_code_collect': 'int',
        'product_code_delivery': 'str',
        'product_options': 'list[RequestProductOptions]',
        'receiver_date_of_birth': 'str',
        'reference': 'str',
        'reference_collect': 'str',
        'remark': 'str',
        'return_barcode': 'str',
        'return_reference': 'str',
        'timeslot_id': 'str',
        'extra_fields': 'list[RequestExtraFields]'
    }

    attribute_map = {
        'addresses': 'Addresses',
        'amounts': 'Amounts',
        'barcode': 'Barcode',
        'coding_text': 'CodingText',
        'collection_time_stamp_start': 'CollectionTimeStampStart',
        'collection_time_stamp_end': 'CollectionTimeStampEnd',
        'contacts': 'Contacts',
        'content': 'Content',
        'cost_center': 'CostCenter',
        'customer_order_number': 'CustomerOrderNumber',
        'customs': 'Customs',
        'delivery_address': 'DeliveryAddress',
        'delivery_date': 'DeliveryDate',
        'delivery_time_stamp_start': 'DeliveryTimeStampStart',
        'delivery_time_stamp_end': 'DeliveryTimeStampEnd',
        'dimension': 'Dimension',
        'down_partner_barcode': 'DownPartnerBarcode',
        'down_partner_id': 'DownPartnerID',
        'down_partner_location': 'DownPartnerLocation',
        'groups': 'Groups',
        'hazardous_material': 'HazardousMaterial',
        'id_type': 'IDType',
        'id_number': 'IDNumber',
        'id_expiration': 'IDExpiration',
        'product_code_collect': 'ProductCodeCollect',
        'product_code_delivery': 'ProductCodeDelivery',
        'product_options': 'ProductOptions',
        'receiver_date_of_birth': 'ReceiverDateOfBirth',
        'reference': 'Reference',
        'reference_collect': 'ReferenceCollect',
        'remark': 'Remark',
        'return_barcode': 'ReturnBarcode',
        'return_reference': 'ReturnReference',
        'timeslot_id': 'TimeslotID',
        'extra_fields': 'ExtraFields'
    }

    def __init__(self, addresses=None, amounts=None, barcode='3SDEVC2016112104', coding_text=None, collection_time_stamp_start=None, collection_time_stamp_end=None, contacts=None, content=None, cost_center=None, customer_order_number=None, customs=None, delivery_address='01', delivery_date=None, delivery_time_stamp_start=None, delivery_time_stamp_end=None, dimension=None, down_partner_barcode=None, down_partner_id=None, down_partner_location=None, groups=None, hazardous_material=None, id_type=None, id_number=None, id_expiration=None, product_code_collect=None, product_code_delivery='3085', product_options=None, receiver_date_of_birth=None, reference=None, reference_collect=None, remark=None, return_barcode=None, return_reference=None, timeslot_id=None, extra_fields=None):  # noqa: E501
        """RequestShipments - a model defined in Swagger"""  # noqa: E501
        self._addresses = None
        self._amounts = None
        self._barcode = None
        self._coding_text = None
        self._collection_time_stamp_start = None
        self._collection_time_stamp_end = None
        self._contacts = None
        self._content = None
        self._cost_center = None
        self._customer_order_number = None
        self._customs = None
        self._delivery_address = None
        self._delivery_date = None
        self._delivery_time_stamp_start = None
        self._delivery_time_stamp_end = None
        self._dimension = None
        self._down_partner_barcode = None
        self._down_partner_id = None
        self._down_partner_location = None
        self._groups = None
        self._hazardous_material = None
        self._id_type = None
        self._id_number = None
        self._id_expiration = None
        self._product_code_collect = None
        self._product_code_delivery = None
        self._product_options = None
        self._receiver_date_of_birth = None
        self._reference = None
        self._reference_collect = None
        self._remark = None
        self._return_barcode = None
        self._return_reference = None
        self._timeslot_id = None
        self._extra_fields = None
        self.discriminator = None
        self.addresses = addresses
        if amounts is not None:
            self.amounts = amounts
        self.barcode = barcode
        if coding_text is not None:
            self.coding_text = coding_text
        if collection_time_stamp_start is not None:
            self.collection_time_stamp_start = collection_time_stamp_start
        if collection_time_stamp_end is not None:
            self.collection_time_stamp_end = collection_time_stamp_end
        if contacts is not None:
            self.contacts = contacts
        if content is not None:
            self.content = content
        if cost_center is not None:
            self.cost_center = cost_center
        if customer_order_number is not None:
            self.customer_order_number = customer_order_number
        if customs is not None:
            self.customs = customs
        if delivery_address is not None:
            self.delivery_address = delivery_address
        if delivery_date is not None:
            self.delivery_date = delivery_date
        if delivery_time_stamp_start is not None:
            self.delivery_time_stamp_start = delivery_time_stamp_start
        if delivery_time_stamp_end is not None:
            self.delivery_time_stamp_end = delivery_time_stamp_end
        self.dimension = dimension
        if down_partner_barcode is not None:
            self.down_partner_barcode = down_partner_barcode
        if down_partner_id is not None:
            self.down_partner_id = down_partner_id
        if down_partner_location is not None:
            self.down_partner_location = down_partner_location
        if groups is not None:
            self.groups = groups
        if hazardous_material is not None:
            self.hazardous_material = hazardous_material
        if id_type is not None:
            self.id_type = id_type
        if id_number is not None:
            self.id_number = id_number
        if id_expiration is not None:
            self.id_expiration = id_expiration
        if product_code_collect is not None:
            self.product_code_collect = product_code_collect
        self.product_code_delivery = product_code_delivery
        if product_options is not None:
            self.product_options = product_options
        if receiver_date_of_birth is not None:
            self.receiver_date_of_birth = receiver_date_of_birth
        if reference is not None:
            self.reference = reference
        if reference_collect is not None:
            self.reference_collect = reference_collect
        if remark is not None:
            self.remark = remark
        if return_barcode is not None:
            self.return_barcode = return_barcode
        if return_reference is not None:
            self.return_reference = return_reference
        if timeslot_id is not None:
            self.timeslot_id = timeslot_id
        if extra_fields is not None:
            self.extra_fields = extra_fields

    @property
    def addresses(self):
        """Gets the addresses of this RequestShipments.  # noqa: E501

        List of 1 or more Address type elements. At least 1 address type is mandatory  # noqa: E501

        :return: The addresses of this RequestShipments.  # noqa: E501
        :rtype: list[RequestAddresses]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this RequestShipments.

        List of 1 or more Address type elements. At least 1 address type is mandatory  # noqa: E501

        :param addresses: The addresses of this RequestShipments.  # noqa: E501
        :type: list[RequestAddresses]
        """
        if addresses is None:
            raise ValueError("Invalid value for `addresses`, must not be `None`")  # noqa: E501

        self._addresses = addresses

    @property
    def amounts(self):
        """Gets the amounts of this RequestShipments.  # noqa: E501

        List of 0 or more AmountType elements. An amount represents a value of the shipment. Amount type 01 mandatory for COD-shipments, Amount type 02 mandatory for domestic insured shipments. Amount type 04 mandatory for Commercial route China (productcode 4992). Amount type 12 mandatory for Inco terms DDP Commercial route China (productcode 4992)  # noqa: E501

        :return: The amounts of this RequestShipments.  # noqa: E501
        :rtype: list[RequestAmounts]
        """
        return self._amounts

    @amounts.setter
    def amounts(self, amounts):
        """Sets the amounts of this RequestShipments.

        List of 0 or more AmountType elements. An amount represents a value of the shipment. Amount type 01 mandatory for COD-shipments, Amount type 02 mandatory for domestic insured shipments. Amount type 04 mandatory for Commercial route China (productcode 4992). Amount type 12 mandatory for Inco terms DDP Commercial route China (productcode 4992)  # noqa: E501

        :param amounts: The amounts of this RequestShipments.  # noqa: E501
        :type: list[RequestAmounts]
        """

        self._amounts = amounts

    @property
    def barcode(self):
        """Gets the barcode of this RequestShipments.  # noqa: E501

        Barcode of the shipment. This is a unique value  # noqa: E501

        :return: The barcode of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this RequestShipments.

        Barcode of the shipment. This is a unique value  # noqa: E501

        :param barcode: The barcode of this RequestShipments.  # noqa: E501
        :type: str
        """
        if barcode is None:
            raise ValueError("Invalid value for `barcode`, must not be `None`")  # noqa: E501

        self._barcode = barcode

    @property
    def coding_text(self):
        """Gets the coding_text of this RequestShipments.  # noqa: E501

        Code used for logistic purposes (usually generated by the service itself when needed)  # noqa: E501

        :return: The coding_text of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._coding_text

    @coding_text.setter
    def coding_text(self, coding_text):
        """Sets the coding_text of this RequestShipments.

        Code used for logistic purposes (usually generated by the service itself when needed)  # noqa: E501

        :param coding_text: The coding_text of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._coding_text = coding_text

    @property
    def collection_time_stamp_start(self):
        """Gets the collection_time_stamp_start of this RequestShipments.  # noqa: E501

        Starting date/time of the collection of the shipment. Format: dd-MM-yyyy hh:mm:ss  # noqa: E501

        :return: The collection_time_stamp_start of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._collection_time_stamp_start

    @collection_time_stamp_start.setter
    def collection_time_stamp_start(self, collection_time_stamp_start):
        """Sets the collection_time_stamp_start of this RequestShipments.

        Starting date/time of the collection of the shipment. Format: dd-MM-yyyy hh:mm:ss  # noqa: E501

        :param collection_time_stamp_start: The collection_time_stamp_start of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._collection_time_stamp_start = collection_time_stamp_start

    @property
    def collection_time_stamp_end(self):
        """Gets the collection_time_stamp_end of this RequestShipments.  # noqa: E501

        Ending date/time of the collection of the shipment. Format: dd-MM-yyyy hh:mm:ss  # noqa: E501

        :return: The collection_time_stamp_end of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._collection_time_stamp_end

    @collection_time_stamp_end.setter
    def collection_time_stamp_end(self, collection_time_stamp_end):
        """Sets the collection_time_stamp_end of this RequestShipments.

        Ending date/time of the collection of the shipment. Format: dd-MM-yyyy hh:mm:ss  # noqa: E501

        :param collection_time_stamp_end: The collection_time_stamp_end of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._collection_time_stamp_end = collection_time_stamp_end

    @property
    def contacts(self):
        """Gets the contacts of this RequestShipments.  # noqa: E501

        One or more ContactType elements belonging to a shipment. Mandatory in some cases. Please refer to the Guidelines   # noqa: E501

        :return: The contacts of this RequestShipments.  # noqa: E501
        :rtype: list[RequestContacts]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this RequestShipments.

        One or more ContactType elements belonging to a shipment. Mandatory in some cases. Please refer to the Guidelines   # noqa: E501

        :param contacts: The contacts of this RequestShipments.  # noqa: E501
        :type: list[RequestContacts]
        """

        self._contacts = contacts

    @property
    def content(self):
        """Gets the content of this RequestShipments.  # noqa: E501

        Content of the shipment. Mandatory for Extra@Home shipments  # noqa: E501

        :return: The content of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this RequestShipments.

        Content of the shipment. Mandatory for Extra@Home shipments  # noqa: E501

        :param content: The content of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def cost_center(self):
        """Gets the cost_center of this RequestShipments.  # noqa: E501

        Cost center of the shipment. This value will appear on your invoice  # noqa: E501

        :return: The cost_center of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this RequestShipments.

        Cost center of the shipment. This value will appear on your invoice  # noqa: E501

        :param cost_center: The cost_center of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._cost_center = cost_center

    @property
    def customer_order_number(self):
        """Gets the customer_order_number of this RequestShipments.  # noqa: E501

        Order number of the customer  # noqa: E501

        :return: The customer_order_number of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._customer_order_number

    @customer_order_number.setter
    def customer_order_number(self, customer_order_number):
        """Sets the customer_order_number of this RequestShipments.

        Order number of the customer  # noqa: E501

        :param customer_order_number: The customer_order_number of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._customer_order_number = customer_order_number

    @property
    def customs(self):
        """Gets the customs of this RequestShipments.  # noqa: E501

        The Customs type is mandatory for GlobalPack shipments and not allowed for any other shipment types.  # noqa: E501

        :return: The customs of this RequestShipments.  # noqa: E501
        :rtype: list[RequestCustoms]
        """
        return self._customs

    @customs.setter
    def customs(self, customs):
        """Sets the customs of this RequestShipments.

        The Customs type is mandatory for GlobalPack shipments and not allowed for any other shipment types.  # noqa: E501

        :param customs: The customs of this RequestShipments.  # noqa: E501
        :type: list[RequestCustoms]
        """

        self._customs = customs

    @property
    def delivery_address(self):
        """Gets the delivery_address of this RequestShipments.  # noqa: E501

        Delivery address specification. This field is mandatory when AddressType on the Address is 09.  # noqa: E501

        :return: The delivery_address of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this RequestShipments.

        Delivery address specification. This field is mandatory when AddressType on the Address is 09.  # noqa: E501

        :param delivery_address: The delivery_address of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._delivery_address = delivery_address

    @property
    def delivery_date(self):
        """Gets the delivery_date of this RequestShipments.  # noqa: E501

        The delivery date of the shipment. We strongly advice to use the DeliveryDate service to get this date when using delivery options like Evening/Morning/Sameday delivery etc. For those products, this field is mandatory (please regard the Guidelines section). Format: dd-MM-yyyy hh:mm:ss  # noqa: E501

        :return: The delivery_date of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this RequestShipments.

        The delivery date of the shipment. We strongly advice to use the DeliveryDate service to get this date when using delivery options like Evening/Morning/Sameday delivery etc. For those products, this field is mandatory (please regard the Guidelines section). Format: dd-MM-yyyy hh:mm:ss  # noqa: E501

        :param delivery_date: The delivery_date of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._delivery_date = delivery_date

    @property
    def delivery_time_stamp_start(self):
        """Gets the delivery_time_stamp_start of this RequestShipments.  # noqa: E501

        The delivery date and the specific starting time of the shipment delivery. This can be retrieved from the DeliveryDate webservice using the MyTime delivery option. Format: dd-MM-yyyy hh:mm:ss  # noqa: E501

        :return: The delivery_time_stamp_start of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._delivery_time_stamp_start

    @delivery_time_stamp_start.setter
    def delivery_time_stamp_start(self, delivery_time_stamp_start):
        """Sets the delivery_time_stamp_start of this RequestShipments.

        The delivery date and the specific starting time of the shipment delivery. This can be retrieved from the DeliveryDate webservice using the MyTime delivery option. Format: dd-MM-yyyy hh:mm:ss  # noqa: E501

        :param delivery_time_stamp_start: The delivery_time_stamp_start of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._delivery_time_stamp_start = delivery_time_stamp_start

    @property
    def delivery_time_stamp_end(self):
        """Gets the delivery_time_stamp_end of this RequestShipments.  # noqa: E501

        The delivery date and the specific end time of the shipment delivery. This can be retrieved from the DeliveryDate webservice using the MyTime delivery option. Format: dd-MM-yyyy hh:mm:ss  # noqa: E501

        :return: The delivery_time_stamp_end of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._delivery_time_stamp_end

    @delivery_time_stamp_end.setter
    def delivery_time_stamp_end(self, delivery_time_stamp_end):
        """Sets the delivery_time_stamp_end of this RequestShipments.

        The delivery date and the specific end time of the shipment delivery. This can be retrieved from the DeliveryDate webservice using the MyTime delivery option. Format: dd-MM-yyyy hh:mm:ss  # noqa: E501

        :param delivery_time_stamp_end: The delivery_time_stamp_end of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._delivery_time_stamp_end = delivery_time_stamp_end

    @property
    def dimension(self):
        """Gets the dimension of this RequestShipments.  # noqa: E501


        :return: The dimension of this RequestShipments.  # noqa: E501
        :rtype: RequestDimension
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this RequestShipments.


        :param dimension: The dimension of this RequestShipments.  # noqa: E501
        :type: RequestDimension
        """
        if dimension is None:
            raise ValueError("Invalid value for `dimension`, must not be `None`")  # noqa: E501

        self._dimension = dimension

    @property
    def down_partner_barcode(self):
        """Gets the down_partner_barcode of this RequestShipments.  # noqa: E501

        Barcode of the downstream network partner of PostNL Pakketten.  # noqa: E501

        :return: The down_partner_barcode of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._down_partner_barcode

    @down_partner_barcode.setter
    def down_partner_barcode(self, down_partner_barcode):
        """Sets the down_partner_barcode of this RequestShipments.

        Barcode of the downstream network partner of PostNL Pakketten.  # noqa: E501

        :param down_partner_barcode: The down_partner_barcode of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._down_partner_barcode = down_partner_barcode

    @property
    def down_partner_id(self):
        """Gets the down_partner_id of this RequestShipments.  # noqa: E501

        Identification of the downstream network partner of PostNL Pakketten.  # noqa: E501

        :return: The down_partner_id of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._down_partner_id

    @down_partner_id.setter
    def down_partner_id(self, down_partner_id):
        """Sets the down_partner_id of this RequestShipments.

        Identification of the downstream network partner of PostNL Pakketten.  # noqa: E501

        :param down_partner_id: The down_partner_id of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._down_partner_id = down_partner_id

    @property
    def down_partner_location(self):
        """Gets the down_partner_location of this RequestShipments.  # noqa: E501

        Identification of the location of the downstream network partner of PostNL Pakketten. Mandatory for Pickup at PostNl Location Belgium: LD-01  # noqa: E501

        :return: The down_partner_location of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._down_partner_location

    @down_partner_location.setter
    def down_partner_location(self, down_partner_location):
        """Sets the down_partner_location of this RequestShipments.

        Identification of the location of the downstream network partner of PostNL Pakketten. Mandatory for Pickup at PostNl Location Belgium: LD-01  # noqa: E501

        :param down_partner_location: The down_partner_location of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._down_partner_location = down_partner_location

    @property
    def groups(self):
        """Gets the groups of this RequestShipments.  # noqa: E501

        List of 0 or more Group types with data, grouping multiple shipments together. Mandatory for multicollo shipments. Please see Guidelines (Multiple shipments) for more information.  # noqa: E501

        :return: The groups of this RequestShipments.  # noqa: E501
        :rtype: list[RequestGroups]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this RequestShipments.

        List of 0 or more Group types with data, grouping multiple shipments together. Mandatory for multicollo shipments. Please see Guidelines (Multiple shipments) for more information.  # noqa: E501

        :param groups: The groups of this RequestShipments.  # noqa: E501
        :type: list[RequestGroups]
        """

        self._groups = groups

    @property
    def hazardous_material(self):
        """Gets the hazardous_material of this RequestShipments.  # noqa: E501


        :return: The hazardous_material of this RequestShipments.  # noqa: E501
        :rtype: list[RequestHazardousMaterial]
        """
        return self._hazardous_material

    @hazardous_material.setter
    def hazardous_material(self, hazardous_material):
        """Sets the hazardous_material of this RequestShipments.


        :param hazardous_material: The hazardous_material of this RequestShipments.  # noqa: E501
        :type: list[RequestHazardousMaterial]
        """

        self._hazardous_material = hazardous_material

    @property
    def id_type(self):
        """Gets the id_type of this RequestShipments.  # noqa: E501

        Type of the ID document. Mandatory for ID Check products. See Products for possible values  # noqa: E501

        :return: The id_type of this RequestShipments.  # noqa: E501
        :rtype: int
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this RequestShipments.

        Type of the ID document. Mandatory for ID Check products. See Products for possible values  # noqa: E501

        :param id_type: The id_type of this RequestShipments.  # noqa: E501
        :type: int
        """

        self._id_type = id_type

    @property
    def id_number(self):
        """Gets the id_number of this RequestShipments.  # noqa: E501

        Document number of the ID document. Mandatory for ID Check products  # noqa: E501

        :return: The id_number of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this RequestShipments.

        Document number of the ID document. Mandatory for ID Check products  # noqa: E501

        :param id_number: The id_number of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._id_number = id_number

    @property
    def id_expiration(self):
        """Gets the id_expiration of this RequestShipments.  # noqa: E501

        Expiration date of the ID document. Mandatory for ID Check products  # noqa: E501

        :return: The id_expiration of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._id_expiration

    @id_expiration.setter
    def id_expiration(self, id_expiration):
        """Sets the id_expiration of this RequestShipments.

        Expiration date of the ID document. Mandatory for ID Check products  # noqa: E501

        :param id_expiration: The id_expiration of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._id_expiration = id_expiration

    @property
    def product_code_collect(self):
        """Gets the product_code_collect of this RequestShipments.  # noqa: E501

        Second product code of a shipment  # noqa: E501

        :return: The product_code_collect of this RequestShipments.  # noqa: E501
        :rtype: int
        """
        return self._product_code_collect

    @product_code_collect.setter
    def product_code_collect(self, product_code_collect):
        """Sets the product_code_collect of this RequestShipments.

        Second product code of a shipment  # noqa: E501

        :param product_code_collect: The product_code_collect of this RequestShipments.  # noqa: E501
        :type: int
        """

        self._product_code_collect = product_code_collect

    @property
    def product_code_delivery(self):
        """Gets the product_code_delivery of this RequestShipments.  # noqa: E501

        Product code of the shipment   # noqa: E501

        :return: The product_code_delivery of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._product_code_delivery

    @product_code_delivery.setter
    def product_code_delivery(self, product_code_delivery):
        """Sets the product_code_delivery of this RequestShipments.

        Product code of the shipment   # noqa: E501

        :param product_code_delivery: The product_code_delivery of this RequestShipments.  # noqa: E501
        :type: str
        """
        if product_code_delivery is None:
            raise ValueError("Invalid value for `product_code_delivery`, must not be `None`")  # noqa: E501

        self._product_code_delivery = product_code_delivery

    @property
    def product_options(self):
        """Gets the product_options of this RequestShipments.  # noqa: E501

        Product options for the shipment, mandatory for certain products, see the Products page of this webservice  # noqa: E501

        :return: The product_options of this RequestShipments.  # noqa: E501
        :rtype: list[RequestProductOptions]
        """
        return self._product_options

    @product_options.setter
    def product_options(self, product_options):
        """Sets the product_options of this RequestShipments.

        Product options for the shipment, mandatory for certain products, see the Products page of this webservice  # noqa: E501

        :param product_options: The product_options of this RequestShipments.  # noqa: E501
        :type: list[RequestProductOptions]
        """

        self._product_options = product_options

    @property
    def receiver_date_of_birth(self):
        """Gets the receiver_date_of_birth of this RequestShipments.  # noqa: E501

        Date of birth. Mandatory for Age check products  # noqa: E501

        :return: The receiver_date_of_birth of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._receiver_date_of_birth

    @receiver_date_of_birth.setter
    def receiver_date_of_birth(self, receiver_date_of_birth):
        """Sets the receiver_date_of_birth of this RequestShipments.

        Date of birth. Mandatory for Age check products  # noqa: E501

        :param receiver_date_of_birth: The receiver_date_of_birth of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._receiver_date_of_birth = receiver_date_of_birth

    @property
    def reference(self):
        """Gets the reference of this RequestShipments.  # noqa: E501

        Your own reference of the shipment. Mandatory for Extra@Home shipments; for E@H this is used to create your order number, so this should be unique for each request.  # noqa: E501

        :return: The reference of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this RequestShipments.

        Your own reference of the shipment. Mandatory for Extra@Home shipments; for E@H this is used to create your order number, so this should be unique for each request.  # noqa: E501

        :param reference: The reference of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def reference_collect(self):
        """Gets the reference_collect of this RequestShipments.  # noqa: E501

        Additional reference of the collect order of the shipment  # noqa: E501

        :return: The reference_collect of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._reference_collect

    @reference_collect.setter
    def reference_collect(self, reference_collect):
        """Sets the reference_collect of this RequestShipments.

        Additional reference of the collect order of the shipment  # noqa: E501

        :param reference_collect: The reference_collect of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._reference_collect = reference_collect

    @property
    def remark(self):
        """Gets the remark of this RequestShipments.  # noqa: E501

        Remark of the shipment.  # noqa: E501

        :return: The remark of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this RequestShipments.

        Remark of the shipment.  # noqa: E501

        :param remark: The remark of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def return_barcode(self):
        """Gets the return_barcode of this RequestShipments.  # noqa: E501

        Return barcode of the shipment. Mandatory for Label in the Box (return label) shipments.  # noqa: E501

        :return: The return_barcode of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._return_barcode

    @return_barcode.setter
    def return_barcode(self, return_barcode):
        """Sets the return_barcode of this RequestShipments.

        Return barcode of the shipment. Mandatory for Label in the Box (return label) shipments.  # noqa: E501

        :param return_barcode: The return_barcode of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._return_barcode = return_barcode

    @property
    def return_reference(self):
        """Gets the return_reference of this RequestShipments.  # noqa: E501

        Return reference of the shipment  # noqa: E501

        :return: The return_reference of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._return_reference

    @return_reference.setter
    def return_reference(self, return_reference):
        """Sets the return_reference of this RequestShipments.

        Return reference of the shipment  # noqa: E501

        :param return_reference: The return_reference of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._return_reference = return_reference

    @property
    def timeslot_id(self):
        """Gets the timeslot_id of this RequestShipments.  # noqa: E501

        ID of the chosen timeslot as returned by the timeslot webservice  # noqa: E501

        :return: The timeslot_id of this RequestShipments.  # noqa: E501
        :rtype: str
        """
        return self._timeslot_id

    @timeslot_id.setter
    def timeslot_id(self, timeslot_id):
        """Sets the timeslot_id of this RequestShipments.

        ID of the chosen timeslot as returned by the timeslot webservice  # noqa: E501

        :param timeslot_id: The timeslot_id of this RequestShipments.  # noqa: E501
        :type: str
        """

        self._timeslot_id = timeslot_id

    @property
    def extra_fields(self):
        """Gets the extra_fields of this RequestShipments.  # noqa: E501


        :return: The extra_fields of this RequestShipments.  # noqa: E501
        :rtype: list[RequestExtraFields]
        """
        return self._extra_fields

    @extra_fields.setter
    def extra_fields(self, extra_fields):
        """Sets the extra_fields of this RequestShipments.


        :param extra_fields: The extra_fields of this RequestShipments.  # noqa: E501
        :type: list[RequestExtraFields]
        """

        self._extra_fields = extra_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestShipments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestShipments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
