# coding: utf-8

"""
    Labelling

    Generates a Base64 label  # noqa: E501

    OpenAPI spec version: v2_2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestAmounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount_type': 'str',
        'account_name': 'str',
        'bic': 'str',
        'currency': 'str',
        'iban': 'str',
        'reference': 'str',
        'transaction_number': 'str',
        'value': 'str'
    }

    attribute_map = {
        'amount_type': 'AmountType',
        'account_name': 'AccountName',
        'bic': 'BIC',
        'currency': 'Currency',
        'iban': 'IBAN',
        'reference': 'Reference',
        'transaction_number': 'TransactionNumber',
        'value': 'Value'
    }

    def __init__(self, amount_type='01', account_name=None, bic=None, currency='EUR', iban=None, reference=None, transaction_number=None, value='100.00'):  # noqa: E501
        """RequestAmounts - a model defined in Swagger"""  # noqa: E501
        self._amount_type = None
        self._account_name = None
        self._bic = None
        self._currency = None
        self._iban = None
        self._reference = None
        self._transaction_number = None
        self._value = None
        self.discriminator = None
        self.amount_type = amount_type
        if account_name is not None:
            self.account_name = account_name
        if bic is not None:
            self.bic = bic
        if currency is not None:
            self.currency = currency
        if iban is not None:
            self.iban = iban
        if reference is not None:
            self.reference = reference
        if transaction_number is not None:
            self.transaction_number = transaction_number
        self.value = value

    @property
    def amount_type(self):
        """Gets the amount_type of this RequestAmounts.  # noqa: E501

        Amount type. This is a code. Possible values are: 01 = Cash on delivery (COD) 02 = Insured value 04 mandatory for Commercial route China. 12 mandatory for Inco terms DDP Commercial route China.  # noqa: E501

        :return: The amount_type of this RequestAmounts.  # noqa: E501
        :rtype: str
        """
        return self._amount_type

    @amount_type.setter
    def amount_type(self, amount_type):
        """Sets the amount_type of this RequestAmounts.

        Amount type. This is a code. Possible values are: 01 = Cash on delivery (COD) 02 = Insured value 04 mandatory for Commercial route China. 12 mandatory for Inco terms DDP Commercial route China.  # noqa: E501

        :param amount_type: The amount_type of this RequestAmounts.  # noqa: E501
        :type: str
        """
        if amount_type is None:
            raise ValueError("Invalid value for `amount_type`, must not be `None`")  # noqa: E501

        self._amount_type = amount_type

    @property
    def account_name(self):
        """Gets the account_name of this RequestAmounts.  # noqa: E501

        Name of bank account owner   # noqa: E501

        :return: The account_name of this RequestAmounts.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this RequestAmounts.

        Name of bank account owner   # noqa: E501

        :param account_name: The account_name of this RequestAmounts.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def bic(self):
        """Gets the bic of this RequestAmounts.  # noqa: E501

        BIC number,optional for COD shipments (mandatory for bank account number other than originating in The Netherlands)  # noqa: E501

        :return: The bic of this RequestAmounts.  # noqa: E501
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this RequestAmounts.

        BIC number,optional for COD shipments (mandatory for bank account number other than originating in The Netherlands)  # noqa: E501

        :param bic: The bic of this RequestAmounts.  # noqa: E501
        :type: str
        """

        self._bic = bic

    @property
    def currency(self):
        """Gets the currency of this RequestAmounts.  # noqa: E501

        Currency code according ISO 4217. E.g. EUR  # noqa: E501

        :return: The currency of this RequestAmounts.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this RequestAmounts.

        Currency code according ISO 4217. E.g. EUR  # noqa: E501

        :param currency: The currency of this RequestAmounts.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def iban(self):
        """Gets the iban of this RequestAmounts.  # noqa: E501

        IBAN bank account number,mandatory for COD shipments. Dutch IBAN numbers are 18 characters   # noqa: E501

        :return: The iban of this RequestAmounts.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this RequestAmounts.

        IBAN bank account number,mandatory for COD shipments. Dutch IBAN numbers are 18 characters   # noqa: E501

        :param iban: The iban of this RequestAmounts.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def reference(self):
        """Gets the reference of this RequestAmounts.  # noqa: E501

        Personal payment reference   # noqa: E501

        :return: The reference of this RequestAmounts.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this RequestAmounts.

        Personal payment reference   # noqa: E501

        :param reference: The reference of this RequestAmounts.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def transaction_number(self):
        """Gets the transaction_number of this RequestAmounts.  # noqa: E501

        Transaction number  # noqa: E501

        :return: The transaction_number of this RequestAmounts.  # noqa: E501
        :rtype: str
        """
        return self._transaction_number

    @transaction_number.setter
    def transaction_number(self, transaction_number):
        """Sets the transaction_number of this RequestAmounts.

        Transaction number  # noqa: E501

        :param transaction_number: The transaction_number of this RequestAmounts.  # noqa: E501
        :type: str
        """

        self._transaction_number = transaction_number

    @property
    def value(self):
        """Gets the value of this RequestAmounts.  # noqa: E501

        Money value in EUR (unless value Currency is specified for another currency). Value format (N6.2): #####0.00 (2 digits behind decimal dot) Mandatory for COD and Insured products  # noqa: E501

        :return: The value of this RequestAmounts.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RequestAmounts.

        Money value in EUR (unless value Currency is specified for another currency). Value format (N6.2): #####0.00 (2 digits behind decimal dot) Mandatory for COD and Insured products  # noqa: E501

        :param value: The value of this RequestAmounts.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestAmounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestAmounts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
