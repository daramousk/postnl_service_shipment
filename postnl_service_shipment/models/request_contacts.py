# coding: utf-8

"""
    Labelling

    Generates a Base64 label  # noqa: E501

    OpenAPI spec version: v2_2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestContacts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact_type': 'str',
        'email': 'str',
        'sms_nr': 'str',
        'tel_nr': 'str'
    }

    attribute_map = {
        'contact_type': 'ContactType',
        'email': 'Email',
        'sms_nr': 'SMSNr',
        'tel_nr': 'TelNr'
    }

    def __init__(self, contact_type='01', email='receiver@email.com', sms_nr='+31612345678', tel_nr='+31301234567'):  # noqa: E501
        """RequestContacts - a model defined in Swagger"""  # noqa: E501
        self._contact_type = None
        self._email = None
        self._sms_nr = None
        self._tel_nr = None
        self.discriminator = None
        self.contact_type = contact_type
        if email is not None:
            self.email = email
        if sms_nr is not None:
            self.sms_nr = sms_nr
        if tel_nr is not None:
            self.tel_nr = tel_nr

    @property
    def contact_type(self):
        """Gets the contact_type of this RequestContacts.  # noqa: E501

        Type of the contact. This is a code. You can find the possible values at Guidelines  # noqa: E501

        :return: The contact_type of this RequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this RequestContacts.

        Type of the contact. This is a code. You can find the possible values at Guidelines  # noqa: E501

        :param contact_type: The contact_type of this RequestContacts.  # noqa: E501
        :type: str
        """
        if contact_type is None:
            raise ValueError("Invalid value for `contact_type`, must not be `None`")  # noqa: E501

        self._contact_type = contact_type

    @property
    def email(self):
        """Gets the email of this RequestContacts.  # noqa: E501

        Email address of the contact. Mandatory in some cases. Please see Guidelines  # noqa: E501

        :return: The email of this RequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RequestContacts.

        Email address of the contact. Mandatory in some cases. Please see Guidelines  # noqa: E501

        :param email: The email of this RequestContacts.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def sms_nr(self):
        """Gets the sms_nr of this RequestContacts.  # noqa: E501

        Mobile phone number of the contact. Mandatory in some cases  # noqa: E501

        :return: The sms_nr of this RequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._sms_nr

    @sms_nr.setter
    def sms_nr(self, sms_nr):
        """Sets the sms_nr of this RequestContacts.

        Mobile phone number of the contact. Mandatory in some cases  # noqa: E501

        :param sms_nr: The sms_nr of this RequestContacts.  # noqa: E501
        :type: str
        """

        self._sms_nr = sms_nr

    @property
    def tel_nr(self):
        """Gets the tel_nr of this RequestContacts.  # noqa: E501

        Phone number of the contact  # noqa: E501

        :return: The tel_nr of this RequestContacts.  # noqa: E501
        :rtype: str
        """
        return self._tel_nr

    @tel_nr.setter
    def tel_nr(self, tel_nr):
        """Sets the tel_nr of this RequestContacts.

        Phone number of the contact  # noqa: E501

        :param tel_nr: The tel_nr of this RequestContacts.  # noqa: E501
        :type: str
        """

        self._tel_nr = tel_nr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestContacts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestContacts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
