# coding: utf-8

"""
    Labelling

    Generates a Base64 label  # noqa: E501

    OpenAPI spec version: v2_2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'ean': 'str',
        'product_url': 'str',
        'quantity': 'str',
        'weight': 'str',
        'value': 'str',
        'hs_tariff_nr': 'str',
        'country_of_origin': 'str'
    }

    attribute_map = {
        'description': 'Description',
        'ean': 'EAN',
        'product_url': 'ProductURL',
        'quantity': 'Quantity',
        'weight': 'Weight',
        'value': 'Value',
        'hs_tariff_nr': 'HSTariffNr',
        'country_of_origin': 'CountryOfOrigin'
    }

    def __init__(self, description='Powdered milk', ean=None, product_url=None, quantity='2', weight='2600', value='20.00', hs_tariff_nr='100878', country_of_origin='NL'):  # noqa: E501
        """RequestContent - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._ean = None
        self._product_url = None
        self._quantity = None
        self._weight = None
        self._value = None
        self._hs_tariff_nr = None
        self._country_of_origin = None
        self.discriminator = None
        self.description = description
        if ean is not None:
            self.ean = ean
        if product_url is not None:
            self.product_url = product_url
        self.quantity = quantity
        self.weight = weight
        self.value = value
        if hs_tariff_nr is not None:
            self.hs_tariff_nr = hs_tariff_nr
        if country_of_origin is not None:
            self.country_of_origin = country_of_origin

    @property
    def description(self):
        """Gets the description of this RequestContent.  # noqa: E501

        Description of goods  # noqa: E501

        :return: The description of this RequestContent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RequestContent.

        Description of goods  # noqa: E501

        :param description: The description of this RequestContent.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def ean(self):
        """Gets the ean of this RequestContent.  # noqa: E501

        A unique code for a product. Together with HS number this is mandatory for product code 4992.  # noqa: E501

        :return: The ean of this RequestContent.  # noqa: E501
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this RequestContent.

        A unique code for a product. Together with HS number this is mandatory for product code 4992.  # noqa: E501

        :param ean: The ean of this RequestContent.  # noqa: E501
        :type: str
        """

        self._ean = ean

    @property
    def product_url(self):
        """Gets the product_url of this RequestContent.  # noqa: E501

        Webshop URL of the product which is being shipped. Mandatory for product code 4992  # noqa: E501

        :return: The product_url of this RequestContent.  # noqa: E501
        :rtype: str
        """
        return self._product_url

    @product_url.setter
    def product_url(self, product_url):
        """Sets the product_url of this RequestContent.

        Webshop URL of the product which is being shipped. Mandatory for product code 4992  # noqa: E501

        :param product_url: The product_url of this RequestContent.  # noqa: E501
        :type: str
        """

        self._product_url = product_url

    @property
    def quantity(self):
        """Gets the quantity of this RequestContent.  # noqa: E501

        Quantity of items in description  # noqa: E501

        :return: The quantity of this RequestContent.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this RequestContent.

        Quantity of items in description  # noqa: E501

        :param quantity: The quantity of this RequestContent.  # noqa: E501
        :type: str
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def weight(self):
        """Gets the weight of this RequestContent.  # noqa: E501

        Net weight of goods in gram(gr)  # noqa: E501

        :return: The weight of this RequestContent.  # noqa: E501
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this RequestContent.

        Net weight of goods in gram(gr)  # noqa: E501

        :param weight: The weight of this RequestContent.  # noqa: E501
        :type: str
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def value(self):
        """Gets the value of this RequestContent.  # noqa: E501

        Commercial (customs) value of goods.  # noqa: E501

        :return: The value of this RequestContent.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RequestContent.

        Commercial (customs) value of goods.  # noqa: E501

        :param value: The value of this RequestContent.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def hs_tariff_nr(self):
        """Gets the hs_tariff_nr of this RequestContent.  # noqa: E501

        First 6 numbers of Harmonized System Code  # noqa: E501

        :return: The hs_tariff_nr of this RequestContent.  # noqa: E501
        :rtype: str
        """
        return self._hs_tariff_nr

    @hs_tariff_nr.setter
    def hs_tariff_nr(self, hs_tariff_nr):
        """Sets the hs_tariff_nr of this RequestContent.

        First 6 numbers of Harmonized System Code  # noqa: E501

        :param hs_tariff_nr: The hs_tariff_nr of this RequestContent.  # noqa: E501
        :type: str
        """

        self._hs_tariff_nr = hs_tariff_nr

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this RequestContent.  # noqa: E501

        Origin country code  # noqa: E501

        :return: The country_of_origin of this RequestContent.  # noqa: E501
        :rtype: str
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this RequestContent.

        Origin country code  # noqa: E501

        :param country_of_origin: The country_of_origin of this RequestContent.  # noqa: E501
        :type: str
        """

        self._country_of_origin = country_of_origin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
