# coding: utf-8

"""
    Labelling

    Generates a Base64 label  # noqa: E501

    OpenAPI spec version: v2_2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestCustomerAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_type': 'str',
        'area': 'str',
        'buildingname': 'str',
        'city': 'str',
        'company_name': 'str',
        'countrycode': 'str',
        'department': 'str',
        'doorcode': 'str',
        'first_name': 'str',
        'floor': 'str',
        'house_nr': 'str',
        'house_nr_ext': 'str',
        'name': 'str',
        'region': 'str',
        'street': 'str',
        'street_house_nr_ext': 'str',
        'zipcode': 'str'
    }

    attribute_map = {
        'address_type': 'AddressType',
        'area': 'Area',
        'buildingname': 'Buildingname',
        'city': 'City',
        'company_name': 'CompanyName',
        'countrycode': 'Countrycode',
        'department': 'Department',
        'doorcode': 'Doorcode',
        'first_name': 'FirstName',
        'floor': 'Floor',
        'house_nr': 'HouseNr',
        'house_nr_ext': 'HouseNrExt',
        'name': 'Name',
        'region': 'Region',
        'street': 'Street',
        'street_house_nr_ext': 'StreetHouseNrExt',
        'zipcode': 'Zipcode'
    }

    def __init__(self, address_type='02', area=None, buildingname=None, city='Hoofddorp', company_name='PostNL', countrycode='NL', department=None, doorcode=None, first_name='Peter', floor=None, house_nr='42', house_nr_ext=None, name='de Ruiter', region=None, street='Siriusdreef', street_house_nr_ext=None, zipcode='2132WT'):  # noqa: E501
        """RequestCustomerAddress - a model defined in Swagger"""  # noqa: E501
        self._address_type = None
        self._area = None
        self._buildingname = None
        self._city = None
        self._company_name = None
        self._countrycode = None
        self._department = None
        self._doorcode = None
        self._first_name = None
        self._floor = None
        self._house_nr = None
        self._house_nr_ext = None
        self._name = None
        self._region = None
        self._street = None
        self._street_house_nr_ext = None
        self._zipcode = None
        self.discriminator = None
        self.address_type = address_type
        if area is not None:
            self.area = area
        if buildingname is not None:
            self.buildingname = buildingname
        self.city = city
        if company_name is not None:
            self.company_name = company_name
        self.countrycode = countrycode
        if department is not None:
            self.department = department
        if doorcode is not None:
            self.doorcode = doorcode
        if first_name is not None:
            self.first_name = first_name
        if floor is not None:
            self.floor = floor
        if house_nr is not None:
            self.house_nr = house_nr
        if house_nr_ext is not None:
            self.house_nr_ext = house_nr_ext
        if name is not None:
            self.name = name
        if region is not None:
            self.region = region
        if street is not None:
            self.street = street
        if street_house_nr_ext is not None:
            self.street_house_nr_ext = street_house_nr_ext
        if zipcode is not None:
            self.zipcode = zipcode

    @property
    def address_type(self):
        """Gets the address_type of this RequestCustomerAddress.  # noqa: E501

        Type of the address. This is a code. You can find the possible values at Guidelines  # noqa: E501

        :return: The address_type of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this RequestCustomerAddress.

        Type of the address. This is a code. You can find the possible values at Guidelines  # noqa: E501

        :param address_type: The address_type of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """
        if address_type is None:
            raise ValueError("Invalid value for `address_type`, must not be `None`")  # noqa: E501

        self._address_type = address_type

    @property
    def area(self):
        """Gets the area of this RequestCustomerAddress.  # noqa: E501

        Area of the address  # noqa: E501

        :return: The area of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this RequestCustomerAddress.

        Area of the address  # noqa: E501

        :param area: The area of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """

        self._area = area

    @property
    def buildingname(self):
        """Gets the buildingname of this RequestCustomerAddress.  # noqa: E501

        Building name of the address  # noqa: E501

        :return: The buildingname of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._buildingname

    @buildingname.setter
    def buildingname(self, buildingname):
        """Sets the buildingname of this RequestCustomerAddress.

        Building name of the address  # noqa: E501

        :param buildingname: The buildingname of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """

        self._buildingname = buildingname

    @property
    def city(self):
        """Gets the city of this RequestCustomerAddress.  # noqa: E501

        City of the address  # noqa: E501

        :return: The city of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this RequestCustomerAddress.

        City of the address  # noqa: E501

        :param city: The city of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this RequestCustomerAddress.  # noqa: E501

        This field has a dependency with the field Name. One of both fields must be filled mandatory; using both fields is also allowed. Mandatory when AddressType is 09.  # noqa: E501

        :return: The company_name of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this RequestCustomerAddress.

        This field has a dependency with the field Name. One of both fields must be filled mandatory; using both fields is also allowed. Mandatory when AddressType is 09.  # noqa: E501

        :param company_name: The company_name of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def countrycode(self):
        """Gets the countrycode of this RequestCustomerAddress.  # noqa: E501

        The ISO2 country codes  # noqa: E501

        :return: The countrycode of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._countrycode

    @countrycode.setter
    def countrycode(self, countrycode):
        """Sets the countrycode of this RequestCustomerAddress.

        The ISO2 country codes  # noqa: E501

        :param countrycode: The countrycode of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """
        if countrycode is None:
            raise ValueError("Invalid value for `countrycode`, must not be `None`")  # noqa: E501

        self._countrycode = countrycode

    @property
    def department(self):
        """Gets the department of this RequestCustomerAddress.  # noqa: E501

        Send to specific department of a company.   # noqa: E501

        :return: The department of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this RequestCustomerAddress.

        Send to specific department of a company.   # noqa: E501

        :param department: The department of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def doorcode(self):
        """Gets the doorcode of this RequestCustomerAddress.  # noqa: E501

        Door code of address. Mandatory for some international shipments.  # noqa: E501

        :return: The doorcode of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._doorcode

    @doorcode.setter
    def doorcode(self, doorcode):
        """Sets the doorcode of this RequestCustomerAddress.

        Door code of address. Mandatory for some international shipments.  # noqa: E501

        :param doorcode: The doorcode of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """

        self._doorcode = doorcode

    @property
    def first_name(self):
        """Gets the first_name of this RequestCustomerAddress.  # noqa: E501

        Remark: please add FirstName and Name (lastname) of the receiver to improve the parcel tracking experience of your customer.   # noqa: E501

        :return: The first_name of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this RequestCustomerAddress.

        Remark: please add FirstName and Name (lastname) of the receiver to improve the parcel tracking experience of your customer.   # noqa: E501

        :param first_name: The first_name of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def floor(self):
        """Gets the floor of this RequestCustomerAddress.  # noqa: E501

        Send to specific floor of a company  # noqa: E501

        :return: The floor of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._floor

    @floor.setter
    def floor(self, floor):
        """Sets the floor of this RequestCustomerAddress.

        Send to specific floor of a company  # noqa: E501

        :param floor: The floor of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """

        self._floor = floor

    @property
    def house_nr(self):
        """Gets the house_nr of this RequestCustomerAddress.  # noqa: E501

        Mandatory for shipments to Benelux. Max. length is 5 characters (only for Benelux addresses). For Benelux addresses,this field should always be numeric.  # noqa: E501

        :return: The house_nr of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._house_nr

    @house_nr.setter
    def house_nr(self, house_nr):
        """Sets the house_nr of this RequestCustomerAddress.

        Mandatory for shipments to Benelux. Max. length is 5 characters (only for Benelux addresses). For Benelux addresses,this field should always be numeric.  # noqa: E501

        :param house_nr: The house_nr of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """

        self._house_nr = house_nr

    @property
    def house_nr_ext(self):
        """Gets the house_nr_ext of this RequestCustomerAddress.  # noqa: E501

        House number extension   # noqa: E501

        :return: The house_nr_ext of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._house_nr_ext

    @house_nr_ext.setter
    def house_nr_ext(self, house_nr_ext):
        """Sets the house_nr_ext of this RequestCustomerAddress.

        House number extension   # noqa: E501

        :param house_nr_ext: The house_nr_ext of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """

        self._house_nr_ext = house_nr_ext

    @property
    def name(self):
        """Gets the name of this RequestCustomerAddress.  # noqa: E501

        Last name of person. This field has a dependency with the field CompanyName. One of both fields must be filled mandatory; using both fields is also allowed. Remark: please add FirstName and Name (lastname) of the receiver to improve the parcel tracking experience of your customer.   # noqa: E501

        :return: The name of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RequestCustomerAddress.

        Last name of person. This field has a dependency with the field CompanyName. One of both fields must be filled mandatory; using both fields is also allowed. Remark: please add FirstName and Name (lastname) of the receiver to improve the parcel tracking experience of your customer.   # noqa: E501

        :param name: The name of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def region(self):
        """Gets the region of this RequestCustomerAddress.  # noqa: E501

        Region of the address  # noqa: E501

        :return: The region of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RequestCustomerAddress.

        Region of the address  # noqa: E501

        :param region: The region of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def street(self):
        """Gets the street of this RequestCustomerAddress.  # noqa: E501

        This field has a dependency with the field StreetHouseNrExt. One of both fields must be filled mandatory; using both fields is also allowed.   # noqa: E501

        :return: The street of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this RequestCustomerAddress.

        This field has a dependency with the field StreetHouseNrExt. One of both fields must be filled mandatory; using both fields is also allowed.   # noqa: E501

        :param street: The street of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def street_house_nr_ext(self):
        """Gets the street_house_nr_ext of this RequestCustomerAddress.  # noqa: E501

        Combination of Street, HouseNr and HouseNrExt. Please see Guidelines for the explanation.  # noqa: E501

        :return: The street_house_nr_ext of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_house_nr_ext

    @street_house_nr_ext.setter
    def street_house_nr_ext(self, street_house_nr_ext):
        """Sets the street_house_nr_ext of this RequestCustomerAddress.

        Combination of Street, HouseNr and HouseNrExt. Please see Guidelines for the explanation.  # noqa: E501

        :param street_house_nr_ext: The street_house_nr_ext of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """

        self._street_house_nr_ext = street_house_nr_ext

    @property
    def zipcode(self):
        """Gets the zipcode of this RequestCustomerAddress.  # noqa: E501

        Zipcode of the address. Mandatory for shipments to Benelux. Max length (NL) 6 characters,(BE;LU) 4 numeric characters  # noqa: E501

        :return: The zipcode of this RequestCustomerAddress.  # noqa: E501
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this RequestCustomerAddress.

        Zipcode of the address. Mandatory for shipments to Benelux. Max length (NL) 6 characters,(BE;LU) 4 numeric characters  # noqa: E501

        :param zipcode: The zipcode of this RequestCustomerAddress.  # noqa: E501
        :type: str
        """

        self._zipcode = zipcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestCustomerAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestCustomerAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
