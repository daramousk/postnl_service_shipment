# coding: utf-8

"""
    Labelling

    Generates a Base64 label  # noqa: E501

    OpenAPI spec version: v2_2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Request(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer': 'RequestCustomer',
        'label_signature': 'str',
        'message': 'RequestMessage',
        'shipments': 'list[RequestShipments]'
    }

    attribute_map = {
        'customer': 'Customer',
        'label_signature': 'LabelSignature',
        'message': 'Message',
        'shipments': 'Shipments'
    }

    def __init__(self, customer=None, label_signature=None, message=None, shipments=None):  # noqa: E501
        """Request - a model defined in Swagger"""  # noqa: E501
        self._customer = None
        self._label_signature = None
        self._message = None
        self._shipments = None
        self.discriminator = None
        self.customer = customer
        if label_signature is not None:
            self.label_signature = label_signature
        self.message = message
        self.shipments = shipments

    @property
    def customer(self):
        """Gets the customer of this Request.  # noqa: E501


        :return: The customer of this Request.  # noqa: E501
        :rtype: RequestCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Request.


        :param customer: The customer of this Request.  # noqa: E501
        :type: RequestCustomer
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def label_signature(self):
        """Gets the label_signature of this Request.  # noqa: E501

        GIF image of the signature (as a base64 encoded string). The value of this element can have a maximum size of 65536 characters. Note that the total request can have a maximum size of 200KB. Larger requests will not be accepted by the server for performance reasons. Requests that exceed this limit will not return a validation error,but a HTTP 404 error.  # noqa: E501

        :return: The label_signature of this Request.  # noqa: E501
        :rtype: str
        """
        return self._label_signature

    @label_signature.setter
    def label_signature(self, label_signature):
        """Sets the label_signature of this Request.

        GIF image of the signature (as a base64 encoded string). The value of this element can have a maximum size of 65536 characters. Note that the total request can have a maximum size of 200KB. Larger requests will not be accepted by the server for performance reasons. Requests that exceed this limit will not return a validation error,but a HTTP 404 error.  # noqa: E501

        :param label_signature: The label_signature of this Request.  # noqa: E501
        :type: str
        """

        self._label_signature = label_signature

    @property
    def message(self):
        """Gets the message of this Request.  # noqa: E501


        :return: The message of this Request.  # noqa: E501
        :rtype: RequestMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Request.


        :param message: The message of this Request.  # noqa: E501
        :type: RequestMessage
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def shipments(self):
        """Gets the shipments of this Request.  # noqa: E501


        :return: The shipments of this Request.  # noqa: E501
        :rtype: list[RequestShipments]
        """
        return self._shipments

    @shipments.setter
    def shipments(self, shipments):
        """Sets the shipments of this Request.


        :param shipments: The shipments of this Request.  # noqa: E501
        :type: list[RequestShipments]
        """
        if shipments is None:
            raise ValueError("Invalid value for `shipments`, must not be `None`")  # noqa: E501

        self._shipments = shipments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Request, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Request):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
