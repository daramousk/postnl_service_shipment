# coding: utf-8

"""
    Labelling

    Generates a Base64 label  # noqa: E501

    OpenAPI spec version: v2_2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestCustoms(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate': 'bool',
        'certificate_nr': 'str',
        'license': 'bool',
        'license_nr': 'str',
        'invoice': 'bool',
        'invoice_nr': 'str',
        'handle_as_non_deliverable': 'bool',
        'currency': 'str',
        'shipment_type': 'str',
        'trusted_shipper_id': 'str',
        'importer_reference_code': 'str',
        'transaction_code': 'str',
        'transaction_description': 'str',
        'content': 'list[RequestContent]'
    }

    attribute_map = {
        'certificate': 'Certificate',
        'certificate_nr': 'CertificateNr',
        'license': 'License',
        'license_nr': 'LicenseNr',
        'invoice': 'Invoice',
        'invoice_nr': 'InvoiceNr',
        'handle_as_non_deliverable': 'HandleAsNonDeliverable',
        'currency': 'Currency',
        'shipment_type': 'ShipmentType',
        'trusted_shipper_id': 'TrustedShipperID',
        'importer_reference_code': 'ImporterReferenceCode',
        'transaction_code': 'TransactionCode',
        'transaction_description': 'TransactionDescription',
        'content': 'Content'
    }

    def __init__(self, certificate=None, certificate_nr=None, license=None, license_nr=None, invoice=None, invoice_nr='INV_0120330', handle_as_non_deliverable=None, currency='EUR', shipment_type='Commercial Goods', trusted_shipper_id=None, importer_reference_code=None, transaction_code=None, transaction_description=None, content=None):  # noqa: E501
        """RequestCustoms - a model defined in Swagger"""  # noqa: E501
        self._certificate = None
        self._certificate_nr = None
        self._license = None
        self._license_nr = None
        self._invoice = None
        self._invoice_nr = None
        self._handle_as_non_deliverable = None
        self._currency = None
        self._shipment_type = None
        self._trusted_shipper_id = None
        self._importer_reference_code = None
        self._transaction_code = None
        self._transaction_description = None
        self._content = None
        self.discriminator = None
        if certificate is not None:
            self.certificate = certificate
        if certificate_nr is not None:
            self.certificate_nr = certificate_nr
        if license is not None:
            self.license = license
        if license_nr is not None:
            self.license_nr = license_nr
        if invoice is not None:
            self.invoice = invoice
        if invoice_nr is not None:
            self.invoice_nr = invoice_nr
        if handle_as_non_deliverable is not None:
            self.handle_as_non_deliverable = handle_as_non_deliverable
        self.currency = currency
        if shipment_type is not None:
            self.shipment_type = shipment_type
        if trusted_shipper_id is not None:
            self.trusted_shipper_id = trusted_shipper_id
        if importer_reference_code is not None:
            self.importer_reference_code = importer_reference_code
        if transaction_code is not None:
            self.transaction_code = transaction_code
        if transaction_description is not None:
            self.transaction_description = transaction_description
        self.content = content

    @property
    def certificate(self):
        """Gets the certificate of this RequestCustoms.  # noqa: E501

        At least one of the three types Certificate, Invoice or License is mandatory for Commercial Goods,Commercial Sample and Returned Goods  # noqa: E501

        :return: The certificate of this RequestCustoms.  # noqa: E501
        :rtype: bool
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this RequestCustoms.

        At least one of the three types Certificate, Invoice or License is mandatory for Commercial Goods,Commercial Sample and Returned Goods  # noqa: E501

        :param certificate: The certificate of this RequestCustoms.  # noqa: E501
        :type: bool
        """

        self._certificate = certificate

    @property
    def certificate_nr(self):
        """Gets the certificate_nr of this RequestCustoms.  # noqa: E501

        Mandatory when Certificate is true.   # noqa: E501

        :return: The certificate_nr of this RequestCustoms.  # noqa: E501
        :rtype: str
        """
        return self._certificate_nr

    @certificate_nr.setter
    def certificate_nr(self, certificate_nr):
        """Sets the certificate_nr of this RequestCustoms.

        Mandatory when Certificate is true.   # noqa: E501

        :param certificate_nr: The certificate_nr of this RequestCustoms.  # noqa: E501
        :type: str
        """

        self._certificate_nr = certificate_nr

    @property
    def license(self):
        """Gets the license of this RequestCustoms.  # noqa: E501

        At least one of the three types Certificate, Invoice or License is mandatory for Commercial Goods,Commercial Sample and Returned Goods  # noqa: E501

        :return: The license of this RequestCustoms.  # noqa: E501
        :rtype: bool
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this RequestCustoms.

        At least one of the three types Certificate, Invoice or License is mandatory for Commercial Goods,Commercial Sample and Returned Goods  # noqa: E501

        :param license: The license of this RequestCustoms.  # noqa: E501
        :type: bool
        """

        self._license = license

    @property
    def license_nr(self):
        """Gets the license_nr of this RequestCustoms.  # noqa: E501

        Mandatory when License is true.  # noqa: E501

        :return: The license_nr of this RequestCustoms.  # noqa: E501
        :rtype: str
        """
        return self._license_nr

    @license_nr.setter
    def license_nr(self, license_nr):
        """Sets the license_nr of this RequestCustoms.

        Mandatory when License is true.  # noqa: E501

        :param license_nr: The license_nr of this RequestCustoms.  # noqa: E501
        :type: str
        """

        self._license_nr = license_nr

    @property
    def invoice(self):
        """Gets the invoice of this RequestCustoms.  # noqa: E501

        At least one of the three types Certificate, Invoice or License is mandatory for Commercial Goods,Commercial Sample and Returned Goods  # noqa: E501

        :return: The invoice of this RequestCustoms.  # noqa: E501
        :rtype: bool
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this RequestCustoms.

        At least one of the three types Certificate, Invoice or License is mandatory for Commercial Goods,Commercial Sample and Returned Goods  # noqa: E501

        :param invoice: The invoice of this RequestCustoms.  # noqa: E501
        :type: bool
        """

        self._invoice = invoice

    @property
    def invoice_nr(self):
        """Gets the invoice_nr of this RequestCustoms.  # noqa: E501

        Mandatory when Invoice is true  # noqa: E501

        :return: The invoice_nr of this RequestCustoms.  # noqa: E501
        :rtype: str
        """
        return self._invoice_nr

    @invoice_nr.setter
    def invoice_nr(self, invoice_nr):
        """Sets the invoice_nr of this RequestCustoms.

        Mandatory when Invoice is true  # noqa: E501

        :param invoice_nr: The invoice_nr of this RequestCustoms.  # noqa: E501
        :type: str
        """

        self._invoice_nr = invoice_nr

    @property
    def handle_as_non_deliverable(self):
        """Gets the handle_as_non_deliverable of this RequestCustoms.  # noqa: E501

        Determines what to do when the shipment cannot be delivered the first time (if this is set to true,the shipment will be returned after the first failed attempt)  # noqa: E501

        :return: The handle_as_non_deliverable of this RequestCustoms.  # noqa: E501
        :rtype: bool
        """
        return self._handle_as_non_deliverable

    @handle_as_non_deliverable.setter
    def handle_as_non_deliverable(self, handle_as_non_deliverable):
        """Sets the handle_as_non_deliverable of this RequestCustoms.

        Determines what to do when the shipment cannot be delivered the first time (if this is set to true,the shipment will be returned after the first failed attempt)  # noqa: E501

        :param handle_as_non_deliverable: The handle_as_non_deliverable of this RequestCustoms.  # noqa: E501
        :type: bool
        """

        self._handle_as_non_deliverable = handle_as_non_deliverable

    @property
    def currency(self):
        """Gets the currency of this RequestCustoms.  # noqa: E501

        Currency code,only EUR and USS are allowed  # noqa: E501

        :return: The currency of this RequestCustoms.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this RequestCustoms.

        Currency code,only EUR and USS are allowed  # noqa: E501

        :param currency: The currency of this RequestCustoms.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def shipment_type(self):
        """Gets the shipment_type of this RequestCustoms.  # noqa: E501

        Type of shipment,possible values: Gift,Documents,Commercial Goods,Commercial Sample,Returned Goods  # noqa: E501

        :return: The shipment_type of this RequestCustoms.  # noqa: E501
        :rtype: str
        """
        return self._shipment_type

    @shipment_type.setter
    def shipment_type(self, shipment_type):
        """Sets the shipment_type of this RequestCustoms.

        Type of shipment,possible values: Gift,Documents,Commercial Goods,Commercial Sample,Returned Goods  # noqa: E501

        :param shipment_type: The shipment_type of this RequestCustoms.  # noqa: E501
        :type: str
        """

        self._shipment_type = shipment_type

    @property
    def trusted_shipper_id(self):
        """Gets the trusted_shipper_id of this RequestCustoms.  # noqa: E501

        Trusted shipper ID; Mandatory for US shipments  # noqa: E501

        :return: The trusted_shipper_id of this RequestCustoms.  # noqa: E501
        :rtype: str
        """
        return self._trusted_shipper_id

    @trusted_shipper_id.setter
    def trusted_shipper_id(self, trusted_shipper_id):
        """Sets the trusted_shipper_id of this RequestCustoms.

        Trusted shipper ID; Mandatory for US shipments  # noqa: E501

        :param trusted_shipper_id: The trusted_shipper_id of this RequestCustoms.  # noqa: E501
        :type: str
        """

        self._trusted_shipper_id = trusted_shipper_id

    @property
    def importer_reference_code(self):
        """Gets the importer_reference_code of this RequestCustoms.  # noqa: E501

        Importer reference code; Mandatory for US shipments  # noqa: E501

        :return: The importer_reference_code of this RequestCustoms.  # noqa: E501
        :rtype: str
        """
        return self._importer_reference_code

    @importer_reference_code.setter
    def importer_reference_code(self, importer_reference_code):
        """Sets the importer_reference_code of this RequestCustoms.

        Importer reference code; Mandatory for US shipments  # noqa: E501

        :param importer_reference_code: The importer_reference_code of this RequestCustoms.  # noqa: E501
        :type: str
        """

        self._importer_reference_code = importer_reference_code

    @property
    def transaction_code(self):
        """Gets the transaction_code of this RequestCustoms.  # noqa: E501

        Transaction code; Mandatory for US shipments  # noqa: E501

        :return: The transaction_code of this RequestCustoms.  # noqa: E501
        :rtype: str
        """
        return self._transaction_code

    @transaction_code.setter
    def transaction_code(self, transaction_code):
        """Sets the transaction_code of this RequestCustoms.

        Transaction code; Mandatory for US shipments  # noqa: E501

        :param transaction_code: The transaction_code of this RequestCustoms.  # noqa: E501
        :type: str
        """

        self._transaction_code = transaction_code

    @property
    def transaction_description(self):
        """Gets the transaction_description of this RequestCustoms.  # noqa: E501

        Transaction description; Mandatory for US shipments  # noqa: E501

        :return: The transaction_description of this RequestCustoms.  # noqa: E501
        :rtype: str
        """
        return self._transaction_description

    @transaction_description.setter
    def transaction_description(self, transaction_description):
        """Sets the transaction_description of this RequestCustoms.

        Transaction description; Mandatory for US shipments  # noqa: E501

        :param transaction_description: The transaction_description of this RequestCustoms.  # noqa: E501
        :type: str
        """

        self._transaction_description = transaction_description

    @property
    def content(self):
        """Gets the content of this RequestCustoms.  # noqa: E501


        :return: The content of this RequestCustoms.  # noqa: E501
        :rtype: list[RequestContent]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this RequestCustoms.


        :param content: The content of this RequestCustoms.  # noqa: E501
        :type: list[RequestContent]
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestCustoms, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestCustoms):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
