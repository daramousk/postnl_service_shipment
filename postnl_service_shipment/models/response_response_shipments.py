# coding: utf-8

"""
    Labelling

    Generates a Base64 label  # noqa: E501

    OpenAPI spec version: v2_2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseResponseShipments(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_code_delivery': 'str',
        'labels': 'list[ResponseLabels]',
        'barcode': 'str',
        'warnings': 'list[ResponseWarnings]'
    }

    attribute_map = {
        'product_code_delivery': 'ProductCodeDelivery',
        'labels': 'Labels',
        'barcode': 'Barcode',
        'warnings': 'Warnings'
    }

    def __init__(self, product_code_delivery=None, labels=None, barcode=None, warnings=None):  # noqa: E501
        """ResponseResponseShipments - a model defined in Swagger"""  # noqa: E501
        self._product_code_delivery = None
        self._labels = None
        self._barcode = None
        self._warnings = None
        self.discriminator = None
        if product_code_delivery is not None:
            self.product_code_delivery = product_code_delivery
        if labels is not None:
            self.labels = labels
        if barcode is not None:
            self.barcode = barcode
        if warnings is not None:
            self.warnings = warnings

    @property
    def product_code_delivery(self):
        """Gets the product_code_delivery of this ResponseResponseShipments.  # noqa: E501


        :return: The product_code_delivery of this ResponseResponseShipments.  # noqa: E501
        :rtype: str
        """
        return self._product_code_delivery

    @product_code_delivery.setter
    def product_code_delivery(self, product_code_delivery):
        """Sets the product_code_delivery of this ResponseResponseShipments.


        :param product_code_delivery: The product_code_delivery of this ResponseResponseShipments.  # noqa: E501
        :type: str
        """

        self._product_code_delivery = product_code_delivery

    @property
    def labels(self):
        """Gets the labels of this ResponseResponseShipments.  # noqa: E501


        :return: The labels of this ResponseResponseShipments.  # noqa: E501
        :rtype: list[ResponseLabels]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ResponseResponseShipments.


        :param labels: The labels of this ResponseResponseShipments.  # noqa: E501
        :type: list[ResponseLabels]
        """

        self._labels = labels

    @property
    def barcode(self):
        """Gets the barcode of this ResponseResponseShipments.  # noqa: E501


        :return: The barcode of this ResponseResponseShipments.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ResponseResponseShipments.


        :param barcode: The barcode of this ResponseResponseShipments.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def warnings(self):
        """Gets the warnings of this ResponseResponseShipments.  # noqa: E501


        :return: The warnings of this ResponseResponseShipments.  # noqa: E501
        :rtype: list[ResponseWarnings]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this ResponseResponseShipments.


        :param warnings: The warnings of this ResponseResponseShipments.  # noqa: E501
        :type: list[ResponseWarnings]
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseResponseShipments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseResponseShipments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
