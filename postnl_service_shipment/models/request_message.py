# coding: utf-8

"""
    Labelling

    Generates a Base64 label  # noqa: E501

    OpenAPI spec version: v2_2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_id': 'str',
        'message_time_stamp': 'str',
        'printertype': 'str'
    }

    attribute_map = {
        'message_id': 'MessageID',
        'message_time_stamp': 'MessageTimeStamp',
        'printertype': 'Printertype'
    }

    def __init__(self, message_id='1', message_time_stamp='29-06-2016 12:00:00', printertype='GraphicFile|PDF'):  # noqa: E501
        """RequestMessage - a model defined in Swagger"""  # noqa: E501
        self._message_id = None
        self._message_time_stamp = None
        self._printertype = None
        self.discriminator = None
        self.message_id = message_id
        self.message_time_stamp = message_time_stamp
        self.printertype = printertype

    @property
    def message_id(self):
        """Gets the message_id of this RequestMessage.  # noqa: E501

        ID of the message  # noqa: E501

        :return: The message_id of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this RequestMessage.

        ID of the message  # noqa: E501

        :param message_id: The message_id of this RequestMessage.  # noqa: E501
        :type: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")  # noqa: E501

        self._message_id = message_id

    @property
    def message_time_stamp(self):
        """Gets the message_time_stamp of this RequestMessage.  # noqa: E501

        Date/time of sending the message. Format: dd-mm-yyyy hh:mm:ss  # noqa: E501

        :return: The message_time_stamp of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._message_time_stamp

    @message_time_stamp.setter
    def message_time_stamp(self, message_time_stamp):
        """Sets the message_time_stamp of this RequestMessage.

        Date/time of sending the message. Format: dd-mm-yyyy hh:mm:ss  # noqa: E501

        :param message_time_stamp: The message_time_stamp of this RequestMessage.  # noqa: E501
        :type: str
        """
        if message_time_stamp is None:
            raise ValueError("Invalid value for `message_time_stamp`, must not be `None`")  # noqa: E501

        self._message_time_stamp = message_time_stamp

    @property
    def printertype(self):
        """Gets the printertype of this RequestMessage.  # noqa: E501

        Printer type that will be used to process the label, e.g. Zebra printer or PDF See Guidelines for the available printer types.  # noqa: E501

        :return: The printertype of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._printertype

    @printertype.setter
    def printertype(self, printertype):
        """Sets the printertype of this RequestMessage.

        Printer type that will be used to process the label, e.g. Zebra printer or PDF See Guidelines for the available printer types.  # noqa: E501

        :param printertype: The printertype of this RequestMessage.  # noqa: E501
        :type: str
        """
        if printertype is None:
            raise ValueError("Invalid value for `printertype`, must not be `None`")  # noqa: E501

        self._printertype = printertype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
