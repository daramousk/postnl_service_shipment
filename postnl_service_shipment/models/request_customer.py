# coding: utf-8

"""
    Labelling

    Generates a Base64 label  # noqa: E501

    OpenAPI spec version: v2_2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestCustomer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'RequestCustomerAddress',
        'collection_location': 'str',
        'contact_person': 'str',
        'customer_code': 'str',
        'customer_number': 'str',
        'email': 'str',
        'name': 'str'
    }

    attribute_map = {
        'address': 'Address',
        'collection_location': 'CollectionLocation',
        'contact_person': 'ContactPerson',
        'customer_code': 'CustomerCode',
        'customer_number': 'CustomerNumber',
        'email': 'Email',
        'name': 'Name'
    }

    def __init__(self, address=None, collection_location='1234506', contact_person='Janssen', customer_code='DEVC', customer_number='11223344', email='email@company.com', name='Janssen'):  # noqa: E501
        """RequestCustomer - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._collection_location = None
        self._contact_person = None
        self._customer_code = None
        self._customer_number = None
        self._email = None
        self._name = None
        self.discriminator = None
        if address is not None:
            self.address = address
        self.collection_location = collection_location
        if contact_person is not None:
            self.contact_person = contact_person
        self.customer_code = customer_code
        self.customer_number = customer_number
        if email is not None:
            self.email = email
        if name is not None:
            self.name = name

    @property
    def address(self):
        """Gets the address of this RequestCustomer.  # noqa: E501


        :return: The address of this RequestCustomer.  # noqa: E501
        :rtype: RequestCustomerAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this RequestCustomer.


        :param address: The address of this RequestCustomer.  # noqa: E501
        :type: RequestCustomerAddress
        """

        self._address = address

    @property
    def collection_location(self):
        """Gets the collection_location of this RequestCustomer.  # noqa: E501

        Code of delivery location at PostNL Pakketten  # noqa: E501

        :return: The collection_location of this RequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._collection_location

    @collection_location.setter
    def collection_location(self, collection_location):
        """Sets the collection_location of this RequestCustomer.

        Code of delivery location at PostNL Pakketten  # noqa: E501

        :param collection_location: The collection_location of this RequestCustomer.  # noqa: E501
        :type: str
        """
        if collection_location is None:
            raise ValueError("Invalid value for `collection_location`, must not be `None`")  # noqa: E501

        self._collection_location = collection_location

    @property
    def contact_person(self):
        """Gets the contact_person of this RequestCustomer.  # noqa: E501

        Name of customer contact person  # noqa: E501

        :return: The contact_person of this RequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._contact_person

    @contact_person.setter
    def contact_person(self, contact_person):
        """Sets the contact_person of this RequestCustomer.

        Name of customer contact person  # noqa: E501

        :param contact_person: The contact_person of this RequestCustomer.  # noqa: E501
        :type: str
        """

        self._contact_person = contact_person

    @property
    def customer_code(self):
        """Gets the customer_code of this RequestCustomer.  # noqa: E501

        Customer code as known at PostNL Pakketten  # noqa: E501

        :return: The customer_code of this RequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._customer_code

    @customer_code.setter
    def customer_code(self, customer_code):
        """Sets the customer_code of this RequestCustomer.

        Customer code as known at PostNL Pakketten  # noqa: E501

        :param customer_code: The customer_code of this RequestCustomer.  # noqa: E501
        :type: str
        """
        if customer_code is None:
            raise ValueError("Invalid value for `customer_code`, must not be `None`")  # noqa: E501

        self._customer_code = customer_code

    @property
    def customer_number(self):
        """Gets the customer_number of this RequestCustomer.  # noqa: E501

        Name of customer contact person  # noqa: E501

        :return: The customer_number of this RequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._customer_number

    @customer_number.setter
    def customer_number(self, customer_number):
        """Sets the customer_number of this RequestCustomer.

        Name of customer contact person  # noqa: E501

        :param customer_number: The customer_number of this RequestCustomer.  # noqa: E501
        :type: str
        """
        if customer_number is None:
            raise ValueError("Invalid value for `customer_number`, must not be `None`")  # noqa: E501

        self._customer_number = customer_number

    @property
    def email(self):
        """Gets the email of this RequestCustomer.  # noqa: E501

        E-mail address of the customer   # noqa: E501

        :return: The email of this RequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RequestCustomer.

        E-mail address of the customer   # noqa: E501

        :param email: The email of this RequestCustomer.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this RequestCustomer.  # noqa: E501

        Customer name  # noqa: E501

        :return: The name of this RequestCustomer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RequestCustomer.

        Customer name  # noqa: E501

        :param name: The name of this RequestCustomer.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestCustomer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestCustomer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
